import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart'; // Para debugPrint
import 'app_colors.dart';
import 'login_screen.dart'; // Para o logout

// --- Tela para a aba "Meus Casos & Triagem" ---
class CasosScreenPlaceholder extends StatelessWidget {
  const CasosScreenPlaceholder({super.key});

  final List<Map<String, String>> _casosRecentes = const [
    {
      'titulo': 'Problema com Produto Defeituoso',
      'status': 'Em Atendimento',
      'data': '20/05/2025'
    },
    {
      'titulo': 'Questão Trabalhista - Verbas',
      'status': 'Concluído',
      'data': '15/05/2025'
    },
    {
      'titulo': 'Análise Contrato de Aluguel',
      'status': 'Aguardando Advogado',
      'data': '10/05/2025'
    },
  ];

  @override
  Widget build(BuildContext context) {
    return ListView(
      padding: const EdgeInsets.all(16.0),
      children: [
        Card(
          elevation: 2.0,
          margin: const EdgeInsets.only(bottom: 20.0),
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(12.0)),
          child: InkWell(
            onTap: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                    content: Text('Abrir tela de Nova Análise (TODO)')),
              );
            },
            borderRadius: BorderRadius.circular(12.0),
            child: Padding(
              padding: const EdgeInsets.all(20.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Precisa de Ajuda Jurídica?',
                          style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: azulEscuro),
                        ),
                        SizedBox(height: 4),
                        Text(
                          'Descreva seu caso e receba uma análise preliminar por nossa IA.',
                          style: TextStyle(fontSize: 14, color: cinzaTexto),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(width: 10),
                  const Icon(Icons.add_circle_rounded,
                      size: 40, color: verdeSucesso),
                ],
              ),
            ),
          ),
        ),
        if (_casosRecentes.isNotEmpty) ...[
          const Padding(
            padding: EdgeInsets.only(top: 10.0, bottom: 10.0),
            child: Text(
              'Seus Casos Recentes',
              style: TextStyle(
                  fontSize: 20, fontWeight: FontWeight.bold, color: azulMedio),
            ),
          ),
          ..._casosRecentes.map((caso) {
            return Card(
              elevation: 1.0,
              margin: const EdgeInsets.symmetric(vertical: 8.0),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10.0)),
              child: ListTile(
                leading: Icon(_getStatusIcon(caso['status']!),
                    color: _getStatusColor(caso['status']!)),
                title: Text(caso['titulo']!,
                    style: const TextStyle(
                        fontWeight: FontWeight.w600, color: azulEscuro)),
                subtitle: Text(
                    'Status: ${caso['status']} - Data: ${caso['data']}',
                    style: const TextStyle(fontSize: 13, color: cinzaTexto)),
                trailing: const Icon(Icons.chevron_right, color: cinzaTexto),
                onTap: () {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content:
                            Text('Abrir detalhes do caso: ${caso['titulo']}')),
                  );
                },
              ),
            );
          }).toList(),
        ] else ...[
          const Padding(
            padding: EdgeInsets.symmetric(vertical: 40.0),
            child: Column(
              children: [
                Icon(Icons.inbox_outlined, size: 60, color: cinzaBorda),
                SizedBox(height: 10),
                Text(
                  'Você ainda não possui casos registrados.',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 16, color: cinzaTexto),
                ),
              ],
            ),
          )
        ],
      ],
    );
  }

  IconData _getStatusIcon(String status) {
    switch (status.toLowerCase()) {
      case 'em atendimento':
        return Icons.hourglass_top_outlined;
      case 'concluído':
        return Icons.check_circle_outline;
      case 'aguardando advogado':
        return Icons.person_search_outlined;
      default:
        return Icons.help_outline;
    }
  }

  Color _getStatusColor(String status) {
    switch (status.toLowerCase()) {
      case 'em atendimento':
        return Colors.blue.shade700;
      case 'concluído':
        return Colors.green.shade700;
      case 'aguardando advogado':
        return Colors.orange.shade700;
      default:
        return cinzaTexto;
    }
  }
}

// --- Tela para a aba "Mensagens" ---
class MensagensScreenPlaceholder extends StatelessWidget {
  const MensagensScreenPlaceholder({super.key});

  final List<Map<String, String>> _conversasRecentes = const [
    {
      'remetente': 'Dr. Carlos Silva',
      'assunto': 'Sobre o caso do Produto Defeituoso',
      'ultimaMensagem': 'Sim, por favor, me envie a nota fiscal...',
      'data': 'Ontem',
      'naoLidas': '2'
    },
    {
      'remetente': 'Dra. Ana Costa',
      'assunto': 'Finalização do caso Trabalhista',
      'ultimaMensagem': 'Fico feliz em ter ajudado! Sucesso!',
      'data': '20/05',
      'naoLidas': '0'
    },
    {
      'remetente': 'Adv. Patrícia Lima',
      'assunto': 'Re: Dúvida Contrato de Aluguel',
      'ultimaMensagem': 'Recebi os documentos, farei a análise...',
      'data': '18/05',
      'naoLidas': '0'
    },
  ];

  @override
  Widget build(BuildContext context) {
    if (_conversasRecentes.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.mail_outline_rounded, size: 80, color: cinzaTexto),
            SizedBox(height: 20),
            Text('Nenhuma mensagem ainda.',
                style: TextStyle(fontSize: 18, color: cinzaTexto)),
          ],
        ),
      );
    }
    return ListView.separated(
      padding: const EdgeInsets.all(8.0),
      itemCount: _conversasRecentes.length,
      itemBuilder: (context, index) {
        final conversa = _conversasRecentes[index];
        final temNaoLidas = conversa['naoLidas'] != null &&
            int.tryParse(conversa['naoLidas']!)! > 0;
        final remetenteSplit = conversa['remetente']!.split(" ");
        final iniciais = remetenteSplit[0][0] +
            (remetenteSplit.length > 1 ? remetenteSplit.last[0] : "");

        return Card(
          elevation: 1.5,
          margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 6.0),
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(10.0)),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: azulMedio,
              foregroundColor: branco,
              child: Text(iniciais.toUpperCase()),
            ),
            title: Text(conversa['remetente']!,
                style: TextStyle(
                    fontWeight:
                        temNaoLidas ? FontWeight.bold : FontWeight.normal,
                    color: azulEscuro)),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(conversa['assunto']!,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: TextStyle(
                        fontSize: 13,
                        color: cinzaTexto,
                        fontWeight:
                            temNaoLidas ? FontWeight.w600 : FontWeight.normal)),
                const SizedBox(height: 2),
                Text(conversa['ultimaMensagem']!,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(fontSize: 13, color: cinzaTexto)),
              ],
            ),
            trailing: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Text(conversa['data']!,
                    style: const TextStyle(fontSize: 11, color: cinzaTexto)),
                if (temNaoLidas) ...[
                  const SizedBox(height: 4),
                  Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                    decoration: BoxDecoration(
                        color: verdeSucesso,
                        borderRadius: BorderRadius.circular(10)),
                    child: Text(conversa['naoLidas']!,
                        style: const TextStyle(
                            color: branco,
                            fontSize: 10,
                            fontWeight: FontWeight.bold)),
                  ),
                ],
              ],
            ),
            onTap: () {
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                  content: Text('Abrir chat com: ${conversa['remetente']}')));
            },
            contentPadding:
                const EdgeInsets.symmetric(vertical: 10.0, horizontal: 16.0),
          ),
        );
      },
      separatorBuilder: (context, index) => const SizedBox(height: 0),
    );
  }
}

// --- Tela para a aba "Perfil" ---
class PerfilScreenPlaceholder extends StatelessWidget {
  const PerfilScreenPlaceholder({super.key});

  Widget _buildProfileOption(
    BuildContext context, {
    required IconData icon,
    required String title,
    required VoidCallback onTap,
  }) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 6.0),
      elevation: 1.5,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10.0)),
      child: ListTile(
        leading: Icon(icon, color: azulMedio),
        title: Text(title,
            style: const TextStyle(
                color: azulEscuro, fontWeight: FontWeight.w500)),
        trailing: const Icon(Icons.chevron_right, color: cinzaTexto),
        onTap: onTap,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    const String nomeUsuario = "Usuário Exemplo";
    const String emailUsuario = "usuario@exemplo.com";

    return ListView(
      padding: const EdgeInsets.all(8.0),
      children: <Widget>[
        const SizedBox(height: 20),
        Card(
          elevation: 2.0,
          margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 10.0),
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(12.0)),
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Row(
              children: [
                const CircleAvatar(
                  radius: 35,
                  backgroundColor: azulEscuro,
                  child: Icon(Icons.person, size: 40, color: branco),
                ),
                const SizedBox(width: 20),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(nomeUsuario,
                          style: TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                              color: azulEscuro),
                          overflow: TextOverflow.ellipsis),
                      const SizedBox(height: 4),
                      const Text(emailUsuario,
                          style: TextStyle(fontSize: 14, color: cinzaTexto),
                          overflow: TextOverflow.ellipsis),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(height: 20),
        _buildProfileOption(context,
            icon: Icons.edit_outlined,
            title: 'Editar Dados Pessoais', onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
              content: Text('Abrir tela de Editar Dados (TODO)')));
        }),
        _buildProfileOption(context,
            icon: Icons.lock_outline, title: 'Alterar Senha', onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
              content: Text('Abrir tela de Alterar Senha (TODO)')));
        }),
        _buildProfileOption(context,
            icon: Icons.notifications_outlined,
            title: 'Preferências de Notificação', onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
              content: Text('Abrir tela de Notificações (TODO)')));
        }),
        _buildProfileOption(context,
            icon: Icons.settings_outlined,
            title: 'Configurações do Aplicativo', onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
              content: Text('Abrir tela de Configurações (TODO)')));
        }),
        _buildProfileOption(context,
            icon: Icons.help_outline, title: 'Ajuda e Suporte', onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Abrir tela de Ajuda (TODO)')));
        }),
        _buildProfileOption(context,
            icon: Icons.info_outline, title: 'Sobre o Meu Direito', onTap: () {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: const Text('Sobre o Meu Direito'),
              content:
                  const Text('Versão 1.0.0 (MVP)\nConectando você à justiça.'),
              actions: [
                TextButton(
                    child: const Text('OK'),
                    onPressed: () => Navigator.of(context).pop())
              ],
            ),
          );
        }),
      ],
    );
  }
}

// --- Widget Principal da Tela com BottomNavigationBar ---
class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _selectedIndex = 0;

  static const List<Widget> _widgetOptions = <Widget>[
    CasosScreenPlaceholder(),
    MensagensScreenPlaceholder(),
    PerfilScreenPlaceholder(),
  ];

  static const List<String> _appBarTitles = <String>[
    'Meus Casos & Triagem',
    'Mensagens',
    'Meu Perfil',
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  void _logout() {
    debugPrint("Botão Sair pressionado - Efetuando Logout Simulado");
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Logout efetuado! Retornando ao login...')),
    );
    if (mounted) {
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (context) => const LoginScreen()),
        (Route<dynamic> route) => false,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_appBarTitles[_selectedIndex]),
        automaticallyImplyLeading: false,
        actions: [
          if (_selectedIndex == 2)
            IconButton(
              icon: const Icon(Icons.logout_outlined),
              tooltip: 'Sair',
              onPressed: _logout,
            ),
        ],
      ),
      body: Center(
        child: _widgetOptions.elementAt(_selectedIndex),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.assignment_late_outlined),
            activeIcon: Icon(Icons.assignment_late),
            label: 'Início',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.chat_bubble_outline),
            activeIcon: Icon(Icons.chat_bubble),
            label: 'Mensagens',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person),
            label: 'Perfil',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: azulEscuro,
        unselectedItemColor: azulMedio.withOpacity(0.7),
        onTap: _onItemTapped,
        type: BottomNavigationBarType.fixed,
      ),
    );
  }
}
